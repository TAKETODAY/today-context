/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://oss.oracle.com/licenses/CDDL+GPL-1.1
 * or LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

/* Generated By:JavaCC: Do not edit this line. ELParserTreeConstants.java Version 5.0 */
package cn.taketoday.expression.parser;

public interface ELParserTreeConstants {

    int JJTCOMPOSITEEXPRESSION = 0;
    int JJTLITERALEXPRESSION = 1;
    int JJTDEFERREDEXPRESSION = 2;
    int JJTDYNAMICEXPRESSION = 3;
    int JJTVOID = 4;
    int JJTSEMICOLON = 5;
    int JJTASSIGN = 6;
    int JJTLAMBDAEXPRESSION = 7;
    int JJTLAMBDAPARAMETERS = 8;
    int JJTCHOICE = 9;
    int JJTOR = 10;
    int JJTAND = 11;
    int JJTEQUAL = 12;
    int JJTNOTEQUAL = 13;
    int JJTLESSTHAN = 14;
    int JJTGREATERTHAN = 15;
    int JJTLESSTHANEQUAL = 16;
    int JJTGREATERTHANEQUAL = 17;
    int JJTCONCAT = 18;
    int JJTPLUS = 19;
    int JJTMINUS = 20;
    int JJTMULT = 21;
    int JJTDIV = 22;
    int JJTMOD = 23;
    int JJTNEGATIVE = 24;
    int JJTNOT = 25;
    int JJTEMPTY = 26;
    int JJTVALUE = 27;
    int JJTDOTSUFFIX = 28;
    int JJTBRACKETSUFFIX = 29;
    int JJTMETHODARGUMENTS = 30;
    int JJTMAPDATA = 31;
    int JJTMAPENTRY = 32;
    int JJTLISTDATA = 33;
    int JJTIDENTIFIER = 34;
    int FUNCTION = 35;
    int JJTTRUE = 36;
    int JJTFALSE = 37;
    int JJTFLOATINGPOINT = 38;
    int JJTINTEGER = 39;
    int JJTSTRING = 40;
    int JJTNULL = 41;

    String[] NODE_NAME = { //
        "CompositeExpression", //
        "LiteralExpression", //
        "DeferredExpression", //
        "DynamicExpression", //
        "void", //
        "SemiColon", //
        "Assign", //
        "LambdaExpression", //
        "LambdaParameters", //
        "Choice", //
        "Or", //
        "And", //
        "Equal", //
        "NotEqual", //
        "LessThan", //
        "GreaterThan", //
        "LessThanEqual", //
        "GreaterThanEqual", //
        "Concat", //
        "Plus", //
        "Minus", //
        "Mult", //
        "Div", //
        "Mod", //
        "Negative", //
        "Not", //
        "Empty", //
        "Value", //
        "DotSuffix", //
        "BracketSuffix", //
        "MethodArguments", //
        "MapData", //
        "MapEntry", //
        "ListData", //
        "Identifier", //
        "Function", //
        "True", //
        "False", //
        "FloatingPoint", //
        "Integer", //
        "String", //
        "Null",//
    };
}
